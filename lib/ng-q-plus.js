// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['angular'], function(angular) {
        return factory(angular);
      });
    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
      return module.exports = factory(require('angular'));
    } else {
      return factory(root.angular);
    }
  })(this, function(angular) {
    return angular.module('ng-q-plus', []).config([
      '$provide', function($provide) {
        return $provide.decorator('$q', [
          '$delegate', '$browser', function($delegate, $browser) {
            var ExtendedPromise, Promise;
            Promise = $delegate.defer().promise.constructor;
            ExtendedPromise = (function(superClass) {
              extend(ExtendedPromise, superClass);

              function ExtendedPromise() {
                return ExtendedPromise.__super__.constructor.apply(this, arguments);
              }

              ExtendedPromise.prototype.isPending = function() {
                return this.$$state.status <= 0;
              };

              ExtendedPromise.prototype.isFulfilled = function() {
                return this.$$state.status === 1;
              };

              ExtendedPromise.prototype.isRejected = function() {
                return this.$$state.status === 2;
              };

              ExtendedPromise.prototype.timeout = function(time_ms, cb) {
                var deferred;
                deferred = $delegate.defer();
                $browser.defer(((function(_this) {
                  return function() {
                    if (_this.isPending()) {
                      if (typeof cb === 'function') {
                        return cb(deferred);
                      } else {
                        if (cb == null) {
                          cb = "Timed out after " + time_ms + " ms";
                        }
                        return deferred.reject(cb);
                      }
                    }
                  };
                })(this)), time_ms);
                this.then(deferred.resolve, deferred.reject, deferred.notify);
                return deferred.promise;
              };

              ExtendedPromise.prototype.tap = function(cb) {
                return this.then(function(value) {
                  cb(value);
                  return value;
                });
              };

              ExtendedPromise.prototype.get = function(attr) {
                return this.then(function(o) {
                  return o[attr];
                });
              };

              ExtendedPromise.prototype.set = function(attr, val) {
                return this.then(function(o) {
                  return $delegate.resolve(attr).then(function(attr) {
                    return $delegate.resolve(val).then(function(val) {
                      o[attr] = val;
                      return o;
                    });
                  });
                });
              };

              ExtendedPromise.prototype.post = function(method, args) {
                return this.then(function(o) {
                  return o[method].apply(o, args);
                });
              };

              ExtendedPromise.prototype.send = function() {
                var args, method;
                method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
                return this.then(function(o) {
                  return o[method].apply(o, args);
                });
              };

              ExtendedPromise.prototype.invoke = function() {
                return this.send.apply(this, arguments);
              };

              ExtendedPromise.prototype.keys = function() {
                return this.then(function(o) {
                  return Object.keys(o);
                });
              };

              ExtendedPromise.prototype.fapply = function(args) {
                return this.then(function(f) {
                  return f.apply(void 0, args);
                });
              };

              ExtendedPromise.prototype.fcall = function() {
                var args;
                args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                return this.then(function(f) {
                  return f.apply(void 0, args);
                });
              };

              ExtendedPromise.prototype.all = function() {
                return this.then(function(arr) {
                  return $delegate.all(arr);
                });
              };

              ExtendedPromise.prototype.props = function() {
                return this.all.apply(this, arguments);
              };

              ExtendedPromise.prototype.map = function(cb) {
                return this.all().then(function(arr) {
                  var key, obj, value;
                  if (Array.isArray(arr)) {
                    return $delegate.all(arr.map(cb));
                  } else {
                    obj = {};
                    for (key in arr) {
                      value = arr[key];
                      obj[key] = cb(key, value);
                    }
                    return $delegate.all(obj);
                  }
                });
              };

              ExtendedPromise.prototype.each = function(cb) {
                return this.map(function(el) {
                  cb(el);
                  return el;
                });
              };

              ExtendedPromise.prototype.join = function() {
                var cb, i, promises;
                promises = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
                return $delegate.all([this].concat(slice.call(promises))).then(function(promises) {
                  return cb.apply(null, promises);
                });
              };

              ExtendedPromise.prototype.deep = function() {
                return this.then(function(result) {
                  var key, value;
                  if (Object.prototype.toString.call(result) === '[object Array]') {
                    return $delegate.all(result.map(function(value) {
                      return $delegate.resolve(value).deep();
                    }));
                  } else if (Object.prototype.toString.call(result) === '[object Object]') {
                    for (key in result) {
                      if (!hasProp.call(result, key)) continue;
                      value = result[key];
                      result[key] = $delegate.resolve(value).deep();
                    }
                    return $delegate.all(result);
                  } else {
                    return result;
                  }
                });
              };

              return ExtendedPromise;

            })(Promise);
            Promise.prototype = ExtendedPromise.prototype;
            return $delegate;
          }
        ]);
      }
    ]).name;
  });

}).call(this);
