// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['angularjs'], function(angular) {
        return factory(angular);
      });
    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
      return module.exports = factory(require('angular'));
    } else {
      return factory(root.angular);
    }
  })(this, function(angular) {
    return angular.module('ng-q-plus', []).config([
      '$provide', function($provide) {
        return $provide.decorator('$q', [
          '$delegate', '$browser', function($delegate, $browser) {
            var promise;
            promise = $delegate.defer().promise.constructor.prototype;
            promise.isPending = function() {
              return this.$$state.status <= 0;
            };
            promise.isFulfilled = function() {
              return this.$$state.status === 1;
            };
            promise.isRejected = function() {
              return this.$$state.status === 2;
            };
            promise.timeout = function(time_ms, cb) {
              var deferred;
              deferred = $delegate.defer();
              $browser.defer(((function(_this) {
                return function() {
                  if (_this.isPending()) {
                    if (typeof cb === 'function') {
                      return cb(deferred);
                    } else {
                      if (cb == null) {
                        cb = "Timed out after " + time_ms + " ms";
                      }
                      return deferred.reject(cb);
                    }
                  }
                };
              })(this)), time_ms);
              this.then(deferred.resolve, deferred.reject, deferred.notify);
              return deferred.promise;
            };
            promise.tap = function(cb) {
              return this.then(function(value) {
                cb(value);
                return value;
              });
            };
            promise.get = function(attr) {
              return this.then(function(o) {
                return o[attr];
              });
            };
            promise.post = function(method, args) {
              return this.then(function(o) {
                return o[method].apply(o, args);
              });
            };
            promise.invoke = promise.send = function() {
              var args, method;
              method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
              return this.then(function(o) {
                return o[method].apply(o, args);
              });
            };
            promise.keys = function() {
              return this.then(function(o) {
                return Object.keys(o);
              });
            };
            promise.fapply = function(args) {
              return this.then(function(f) {
                return f.apply(void 0, args);
              });
            };
            promise.fcall = function() {
              var args;
              args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              return this.then(function(f) {
                return f.apply(void 0, args);
              });
            };
            promise.all = function() {
              return this.then(function(arr) {
                return $delegate.all(arr.map(function(el) {
                  return $delegate.resolve(el);
                }));
              });
            };
            return $delegate;
          }
        ]);
      }
    ]).name;
  });

}).call(this);
